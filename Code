import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPClassifier


!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

link = 'https://drive.google.com/open?id=1PNKGLCpWsxpc9mYcdh-rjx3sPEhyIDW6'
fluff, id = link.split('=')
print (id) 


link2 = 'https://drive.google.com/open?id=1UEn8Xj-9Gi8hAveHKq7TjRXao3h7rDi6'
fluff, id = link2.split('=')
print (id) 


downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('sign_mnist_train.csv')  
train = pd.read_csv('sign_mnist_train.csv')

# training dataset is now stored in a Dataframe


downloaded2 = drive.CreateFile({'id':id}) 
downloaded2.GetContentFile('sign_mnist_test.csv')  
test = pd.read_csv('sign_mnist_test.csv')

# Testing data set is now stored in a Dataframe


print(train.head())

print(test.head())

print(train.shape)
print(test.shape)


# Converting into arrays
train_set = np.array(train, dtype = 'float32')
test_set = np.array(test, dtype='float32')


# Hand gestures
class_names = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y' ]


X_train = train_set[:, 1:] / 255
y_train = train_set[:, 0]

X_test = test_set[:, 1:] / 255
y_test = test_set[:,0]


from sklearn.model_selection import train_test_split
X_train, X_validate, y_train, y_validate = train_test_split(X_train, y_train, test_size = 0.2, random_state = 12345)


X_train = X_train.reshape(X_train.shape[0], *(28, 28, 1))
X_test = X_test.reshape(X_test.shape[0], *(28, 28, 1))
X_validate = X_validate.reshape(X_validate.shape[0], *(28, 28, 1))


import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from keras.optimizers import Adam
from keras.callbacks import TensorBoard


# CNN
cnn_model = Sequential()

cnn_model.add(Conv2D(32, (3, 3), input_shape = (28,28,1), activation='relu'))
cnn_model.add(MaxPooling2D(pool_size = (2, 2)))
cnn_model.add(Dropout(0.25))

cnn_model.add(Conv2D(64, (3, 3), input_shape = (28,28,1), activation='relu'))
cnn_model.add(MaxPooling2D(pool_size = (2, 2)))
cnn_model.add(Dropout(0.25))

cnn_model.add(Conv2D(128, (3, 3), input_shape = (28,28,1), activation='relu'))
cnn_model.add(MaxPooling2D(pool_size = (2, 2)))
cnn_model.add(Dropout(0.25))

cnn_model.add(Flatten())

cnn_model.add(Dense(units = 512, activation = 'relu'))
cnn_model.add(Dropout(0.25))
cnn_model.add(Dense(units = 25, activation = 'softmax'))



# Compile
cnn_model.compile(loss ='sparse_categorical_crossentropy', optimizer='adam' ,metrics =['accuracy'])

# Train
history = cnn_model.fit(X_train, y_train, batch_size = 512, epochs = 50, verbose = 1, validation_data = (X_validate, y_validate))





#Predictions for the test data
predicted_class = cnn_model.predict_classes(X_test)
print(f'actual: {y_test[3]}')
print(f'prediction {predicted_class[3]}')

fig, axes = plt.subplots(1, 1, figsize = (12,12))

axes.imshow(X_test[3].reshape(28,28))
axes.set_title(f'Prediction Class = {predicted_classes[3]:0.1f}\n True Class = {y_test[3]:0.1f}')
axes.axis('off')
print("the 0th term in the alphabet is 'a', and the sign language represents an 'a'")
